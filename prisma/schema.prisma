// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTRES_URL")
}

model User {
  id        String      @id @default(cuid())

  email     String      @unique 
  password  String      
  username  String      @unique
  displayName String?   @map("display_name")

  avatar    String?
  bio       String?

  isVerified Boolean   @default(false)  @map("is_verified")

  isEmailVerified Boolean   @default(false)  @map("is_email_verified")
  isTotpEnabled   Boolean   @default(false)  @map("is_totp_enabled")
  totpSecret      String?   @map("totp_secret")

  isDeactivated   Boolean   @default(false)  @map("is_deactivated")
  deactivatedAt   DateTime?  @map("deactivated_at")

  tokens    Token[] 
  socialLinks SocialLink[]

  stream Stream?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model SocialLink {
  id        String      @id @default(cuid())

  title String
  url String



  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("social_links")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")
}

model Stream {
  id        String      @id @default(cuid())

  title String
  thumbnailUrl String? @map("thumbnail_url")

  ingressId String? @unique @map("ingress_id")
  serverUrl String? @map("server_url")
  streamKey String? @map("stream_key")

  isLive Boolean @default(false) @map("is_live")


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("streams")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @map("user_id")
}

model Token {
  id        String      @id @default(cuid())

  token String @unique

  type TokenType

  expiresIn DateTime @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")
}

enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
  DEACTIVATE_ACCOUNT

  @@map("token_types")
}
