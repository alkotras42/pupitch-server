# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthModel {
  message: String
  user: UserModel
}

type CategoryModel {
  createdAt: DateTime!
  description: String
  id: ID!
  slug: String!
  streams: [StreamModel!]!
  thumbnailUrl: String
  title: String!
  updatedAt: DateTime!
}

input ChangeEmailInput {
  email: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeProfileInfoInput {
  bio: String!
  displayName: String!
  username: String!
}

input ChangeStreamInfoInput {
  categoryId: String!
  title: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeactivateAccountInput {
  email: String!
  password: String!
  pin: String
}

type DeviceModel {
  browser: String!
  os: String!
  type: String!
}

input EnableTotpInput {
  pin: String!
  secret: String!
}

input FiltresInput {
  searchTeam: String
  skip: Float
  take: Float
}

input GenerateStreamTokenInput {
  channelId: String!
  userId: String!
}

type GenerateStreamTokenModule {
  token: ID!
}

type LocationModel {
  city: String!
  country: String!
  latidute: Float!
  longitude: Float!
}

input LoginInput {
  login: String!
  password: String!
  pin: String
}

type Mutation {
  changeEmail(input: ChangeEmailInput!): Boolean!
  changePassword(input: ChangePasswordInput!): Boolean!
  changeProfileAvatar(avatar: Upload!): Boolean!
  changeProfileInfo(data: ChangeProfileInfoInput!): Boolean!
  changeStreamInfo(input: ChangeStreamInfoInput!): Boolean!
  changeStreamThumbnail(thumbnail: Upload!): Boolean!
  clearessionCookie: Boolean!
  createIngress(ingressType: Float!): Boolean!
  createSocialLinks(data: SocialLinkInput!): Boolean!
  createUser(data: CreateUserInput!): Boolean!
  deactivateAccount(input: DeactivateAccountInput!): AuthModel!
  deleteSocialLinks(id: String!): Boolean!
  disableTotp: Boolean!
  enableTotp(data: EnableTotpInput!): Boolean!
  generateStreamToken(input: GenerateStreamTokenInput!): GenerateStreamTokenModule!
  loginUser(data: LoginInput!): AuthModel!
  logoutUser: Boolean!
  newPassword(data: NewPasswordInput!): Boolean!
  removeProfileAvatar: Boolean!
  removeSession(sessionId: String!): Boolean!
  removeStreamThumbnail: Boolean!
  resetPassword(data: ResetPasswordInput!): Boolean!
  updateSocialLinks(data: SocialLinkInput!, id: String!): Boolean!
  verifyAccount(input: VerificationInput!): UserModel!
}

input NewPasswordInput {
  confirmPassword: String!
  password: String!
  token: String!
}

type Query {
  findAllCategories: [CategoryModel!]!
  findAllStreams(filters: FiltresInput!): [StreamModel!]!
  findCategoryBySlug(input: String!): CategoryModel!
  findCurrentSessions: SessionModel!
  findMe: UserModel!
  findRadndomCategories: [CategoryModel!]!
  findRandomStreams: [StreamModel!]!
  findSessionsByUser: [SessionModel!]!
  findSocialLinks: [SocialLinkModel!]!
  generateTotpSecret: TotpModel!
}

input ResetPasswordInput {
  email: String!
}

type SessionMetadataModel {
  device: DeviceModel!
  ip: String!
  location: LocationModel!
}

type SessionModel {
  createdAt: String!
  id: ID!
  metadata: SessionMetadataModel!
  userId: String!
}

input SocialLinkInput {
  title: String!
  url: String!
}

type SocialLinkModel {
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
  url: String!
  userId: String!
}

type StreamModel {
  category: CategoryModel!
  categoryId: String!
  createdAt: DateTime!
  id: ID!
  ingressId: String
  isLive: Boolean!
  serverUrl: String
  streamKey: String
  thumbnailUrl: String
  title: String!
  updatedAt: DateTime!
  user: UserModel!
  userId: String!
}

type TotpModel {
  qrcodeUrl: String!
  secret: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserModel {
  avatar: String
  bio: String
  createdAt: DateTime!
  deactivatedAt: DateTime
  displayName: String
  email: String!
  id: ID!
  isDeactivated: Boolean!
  isEmailVerified: Boolean!
  isTotpEnabled: Boolean!
  isVerified: Boolean!
  password: String!
  socialLinks: [SocialLinkModel!]
  stream: StreamModel!
  totpSecret: String
  updatedAt: DateTime!
  username: String!
}

input VerificationInput {
  token: String!
}